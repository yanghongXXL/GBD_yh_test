[{"path":"index.html","id":"前言","chapter":"前言","heading":"前言","text":"小菜鸟学习笔记，第一次尝试构建bookdown","code":""},{"path":"base_r基础.html","id":"base_r基础","chapter":"第 1 章 Base_R基础","heading":"第 1 章 Base_R基础","text":"","code":""},{"path":"base_r基础.html","id":"基础拾遗","chapter":"第 1 章 Base_R基础","heading":"1.1 基础拾遗","text":"窗口可以通过拖动分割柱移动，也可以使用快捷键控制。比如：Ctrl+shift+1(2\\3\\4)窗口可以通过拖动分割柱移动，也可以使用快捷键控制。比如：Ctrl+shift+1(2\\3\\4)创建一个R脚本 ——Ctrl+shift+N创建一个R脚本 ——Ctrl+shift+N快速注释——Ctrl+shift+C快速注释——Ctrl+shift+C善于利用小标题实现功能分区（ctrl+shift+r）善于利用小标题实现功能分区（ctrl+shift+r）ctrl+alt+r ——快速插入代码框ctrl+alt+r ——快速插入代码框注释（Ctrl+shift+c）； # ；注释（Ctrl+shift+c）； # ；赋值（Alt+-）： =, <- ;赋值（Alt+-）： =, <- ;函数的标志： ();函数的标志： ();变量索引： $;变量索引： $;管道操作符： %>%， |>：读作 “然后” ;管道操作符： %>%， |>：读作 “然后” ;比较或判断： >, < , >=, <=, ==, != ；比较或判断： >, < , >=, <=, ==, != ；逻辑运算： &(与), |(或), !(非) ;逻辑运算： &(与), |(或), !(非) ;算数运算： +， -， *， /, ^, %%(取余), %/%(整除)。算数运算： +， -， *， /, ^, %%(取余), %/%(整除)。","code":""},{"path":"base_r基础.html","id":"数据基本操作","chapter":"第 1 章 Base_R基础","heading":"1.2 数据基本操作","text":"","code":""},{"path":"base_r基础.html","id":"读取数据","chapter":"第 1 章 Base_R基础","heading":"1.2.1 读取数据","text":"","code":"\nmydata <- read_csv(\"data/data.csv\") # 读取数据\n# knitr::kable(mydata, align = \"c\")\n\ncolnames(mydata) # 查看表头##  [1] \"measure\"  \"location\" \"sex\"      \"age\"     \n##  [5] \"cause\"    \"metric\"   \"year\"     \"val\"     \n##  [9] \"upper\"    \"lower\"\nstr(mydata) # 查看数据结构## spc_tbl_ [900 × 10] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n##  $ measure : chr [1:900] \"Prevalence\" \"Prevalence\" \"Prevalence\" \"Prevalence\" ...\n##  $ location: chr [1:900] \"Global\" \"Global\" \"Global\" \"Global\" ...\n##  $ sex     : chr [1:900] \"Male\" \"Female\" \"Both\" \"Male\" ...\n##  $ age     : chr [1:900] \"All ages\" \"All ages\" \"All ages\" \"All ages\" ...\n##  $ cause   : chr [1:900] \"HIV/AIDS\" \"HIV/AIDS\" \"HIV/AIDS\" \"HIV/AIDS\" ...\n##  $ metric  : chr [1:900] \"Number\" \"Number\" \"Number\" \"Percent\" ...\n##  $ year    : num [1:900] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n##  $ val     : num [1:900] 3.87e+06 3.96e+06 7.83e+06 1.50e-03 1.53e-03 ...\n##  $ upper   : num [1:900] 4.40e+06 4.55e+06 8.85e+06 1.71e-03 1.76e-03 ...\n##  $ lower   : num [1:900] 3.35e+06 3.40e+06 6.88e+06 1.30e-03 1.32e-03 ...\n##  - attr(*, \"spec\")=\n##   .. cols(\n##   ..   measure = col_character(),\n##   ..   location = col_character(),\n##   ..   sex = col_character(),\n##   ..   age = col_character(),\n##   ..   cause = col_character(),\n##   ..   metric = col_character(),\n##   ..   year = col_double(),\n##   ..   val = col_double(),\n##   ..   upper = col_double(),\n##   ..   lower = col_double()\n##   .. )\n##  - attr(*, \"problems\")=<externalptr>\nunique(mydata$cause) # 查看分类变量的取值（唯一值）## [1] \"HIV/AIDS\"                                     \n## [2] \"Sexually transmitted infections excluding HIV\"\n# 其他查看数据的函数\n# summary(mydata)\n# head(mydata)\n# tail(mydata)"},{"path":"base_r基础.html","id":"选择数据","chapter":"第 1 章 Base_R基础","heading":"1.2.2 选择数据","text":"这里面出现了管道操作符号” |> “, 这个符号读作：然后。所以这个语句的意思是：首先，选中 mydata，然后，选择 cause 为”HIV/AIDS” 的行，然后，选择年份为 2019 年的行，最后，将选择好的数据赋值给 mydata2。特别注意： = 是赋值符， == 为判断符。","code":"\nmydata2 <- mydata |> \n  filter(cause == \"HIV/AIDS\") |> \n  filter(year == 2019)\nmydata2## # A tibble: 15 × 10\n##   measure    location sex    age     cause metric  year\n##   <chr>      <chr>    <chr>  <chr>   <chr> <chr>  <dbl>\n## 1 Prevalence Global   Male   All ag… HIV/… Number  2019\n## 2 Prevalence Global   Female All ag… HIV/… Number  2019\n## 3 Prevalence Global   Both   All ag… HIV/… Number  2019\n## 4 Prevalence Global   Male   All ag… HIV/… Perce…  2019\n## 5 Prevalence Global   Female All ag… HIV/… Perce…  2019\n## 6 Prevalence Global   Both   All ag… HIV/… Perce…  2019\n## # … with 9 more rows, and 3 more variables: val <dbl>,\n## #   upper <dbl>, lower <dbl>"},{"path":"base_r基础.html","id":"保存数据","chapter":"第 1 章 Base_R基础","heading":"1.2.3 保存数据","text":"","code":"\nwrite.csv(mydata2, # 将 mydata2 这个数据\n          \"HIV.csv\") # 保存为 HIV.csv 文件"},{"path":"base_r基础.html","id":"数据类型与数据结构","chapter":"第 1 章 Base_R基础","heading":"1.3 数据类型与数据结构","text":"","code":""},{"path":"base_r基础.html","id":"常见的数据类型","chapter":"第 1 章 Base_R基础","heading":"1.3.1 常见的数据类型","text":"R 语言常见数据类型有：数值类型（numeric），字符串（character），逻辑（logical），其他： POSIXct,POSIXt 等。数值类型： 1， 2， 3， 4.5,3.8;字符串类型：“字符”， “123”， “ASIR”， “HIV”逻辑： TRUE， FALSE, T, F;","code":"\nclass(1)## [1] \"numeric\"\ntypeof(4.5)## [1] \"double\"\nclass(\"123\")## [1] \"character\"\ntypeof(\"ASIR\")## [1] \"character\"\nclass(T)## [1] \"logical\"\ntypeof(FALSE)## [1] \"logical\""},{"path":"base_r基础.html","id":"特殊数据类型-naninf-na-null","chapter":"第 1 章 Base_R基础","heading":"1.3.2 特殊数据类型： NaN,Inf， NA， NULL","text":"NaN:number, 计算出错时候出现，比如 0/0,Inf/InfNaN:number, 计算出错时候出现，比如 0/0,Inf/InfInf : 无穷Inf : 无穷NA：availabel，缺失值。 NA 值具有传染性，任何数值与之发生关系均会变为 NANA：availabel，缺失值。 NA 值具有传染性，任何数值与之发生关系均会变为 NANULL：空值。空值与 NA 的区别：比如一个教室稀稀拉拉坐了十几个学生，那么没有学生的位置可以视为缺失，而空值表示连座位也没有。NULL：空值。空值与 NA 的区别：比如一个教室稀稀拉拉坐了十几个学生，那么没有学生的位置可以视为缺失，而空值表示连座位也没有。","code":""},{"path":"base_r基础.html","id":"数据类型的转换-as.type","chapter":"第 1 章 Base_R基础","heading":"1.3.3 数据类型的转换 as.type()","text":"numeric 与 logical 可以转化为 character，而 character 转化为 numeric 或者 logical 有可能出错，产生 NA 值。logical 可以转化为数值 0/1, 而在进行逻辑判断的时候， 0/1 也会被认为是 F/T","code":"\na <- as.character(1990)\nclass(a)## [1] \"character\"\nb <- as.numeric(\"1990\")\nclass(b)## [1] \"numeric\"\nc <- as.numeric(\"ABC\")\n## Warning: 强制改变过程中产生了NA\nc## [1] NA\nas.numeric(TRUE)## [1] 1\nas.logical(1)## [1] TRUE"},{"path":"base_r基础.html","id":"数据结构","chapter":"第 1 章 Base_R基础","heading":"1.3.4 数据结构","text":"标量单个元素组成的数据结构，比如””,123,TRUE 等。### 向量多个标量组成的一维的数据结构，比如 Vector。矩阵 (matrix)，数据框 (data.frame)， tipple矩阵 (matrix)，数据框 (data.frame)， tipple列表 (list) 与数组 (array)列表 (list) 与数组 (array)","code":"\n# 生成向量\na <- c(1990:2019)\na##  [1] 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999\n## [11] 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n## [21] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019\nb <- c(1,2,3,4,5,6)\nb## [1] 1 2 3 4 5 6\nc <- rep(\"A\",3) #repeat 前三个字母\nc## [1] \"A\" \"A\" \"A\"\nd <- seq(from=1,to=10,by=2) #sequence 前三个字母\nd## [1] 1 3 5 7 9"},{"path":"base_r基础.html","id":"作业","chapter":"第 1 章 Base_R基础","heading":"1.4 作业","text":"查看 data.csv 数据, 说出这个数据的性别有多少种？从 data.csv 文档选择年龄标准化 患病率数据。从 data.csv 文档选择患病人数数据。从 data.csv 文档中选择 1990 到 2010 年艾滋病的女性患病率数据，并写出为 HIV_female.csv 文档。从 data.csv 文档中选择 1990,1995,2000,2005,2010,2015年男性、女性其他传染性疾病患病率数据，并写出为 nonHIV.csv 文档","code":"\ndata <- read_csv(\"data/data.csv\")\nunique(data$sex)## [1] \"Male\"   \"Female\" \"Both\"\ndata |> \n  filter(age == \"Age-standardized\") |> \n  filter(metric == \"Rate\")## # A tibble: 180 × 10\n##   measure locat…¹ sex   age   cause metric  year    val\n##   <chr>   <chr>   <chr> <chr> <chr> <chr>  <dbl>  <dbl>\n## 1 Preval… Global  Male  Age-… HIV/… Rate    1990   148.\n## 2 Preval… Global  Fema… Age-… HIV/… Rate    1990   147.\n## 3 Preval… Global  Both  Age-… HIV/… Rate    1990   147.\n## 4 Preval… Global  Male  Age-… Sexu… Rate    1990 11293.\n## 5 Preval… Global  Fema… Age-… Sexu… Rate    1990 19439.\n## 6 Preval… Global  Both  Age-… Sexu… Rate    1990 15387.\n## # … with 174 more rows, 2 more variables: upper <dbl>,\n## #   lower <dbl>, and abbreviated variable name\n## #   ¹​location\ndata |> \n  filter(metric == \"Number\")## # A tibble: 180 × 10\n##   measure locat…¹ sex   age   cause metric  year    val\n##   <chr>   <chr>   <chr> <chr> <chr> <chr>  <dbl>  <dbl>\n## 1 Preval… Global  Male  All … HIV/… Number  1990 3.87e6\n## 2 Preval… Global  Fema… All … HIV/… Number  1990 3.96e6\n## 3 Preval… Global  Both  All … HIV/… Number  1990 7.83e6\n## 4 Preval… Global  Male  All … Sexu… Number  1990 2.71e8\n## 5 Preval… Global  Fema… All … Sexu… Number  1990 4.74e8\n## 6 Preval… Global  Both  All … Sexu… Number  1990 7.46e8\n## # … with 174 more rows, 2 more variables: upper <dbl>,\n## #   lower <dbl>, and abbreviated variable name\n## #   ¹​location\ndata |> \n  filter(year %in% c(1990:2010)) |> \n  filter(sex == \"Female\") |> \n  filter(cause == \"HIV/AIDS\") |> \n  filter(metric == \"Rate\") |> \n  write_csv(\"data/HIV_female.csv\")\ndata |> \n  filter(year %in% c(1990,1995, 2000, 2005, 2010, 2015)) |> \n  filter(cause != \"HIV/AIDS\") |> \n  filter(metric == \"Rate\") |> \n  write_csv(\"data/nonHIV.csv\")"},{"path":"base_r基础.html","id":"函数","chapter":"第 1 章 Base_R基础","heading":"1.5 函数","text":"","code":""},{"path":"base_r基础.html","id":"函数的结构","chapter":"第 1 章 Base_R基础","heading":"1.5.1 函数的结构","text":"R 语言函数一般由三个部分构成：函数体（body），参数（formals） , 环境（environment）。可以通过相应的函数查看函数的相应部分。以常见的 “粘贴” 函数 paste() 为例：我们分别使用 body， formals, environment 函数查看 paste() 函数的相应部分。","code":"\n# paste() 函数可以将两个向量对应的元素粘贴在一起。\na <- c(\"A\",\"B\",\"C\")\nb <- c(1:3)\nc <- paste(a,b,sep = \":\",collapse = NULL)\nc## [1] \"A:1\" \"B:2\" \"C:3\"\n# 查看函数结构\nbody(paste)## .Internal(paste(list(...), sep, collapse, recycle0))\n# 查看函数参数\nformals(paste)## $...\n## \n## \n## $sep\n## [1] \" \"\n## \n## $collapse\n## NULL\n## \n## $recycle0\n## [1] FALSE\n# 查看函数来自哪个包\nenvironment(paste)## <environment: namespace:base>"},{"path":"base_r基础.html","id":"函数的功能","chapter":"第 1 章 Base_R基础","heading":"1.5.2 函数的功能","text":"函数就像一个加工厂，可以将 “原料” 通过一系列转变，然后输出相应的 “产品”函数展示这里的输入，可以是某个值、向量、 data.frame，或者是其他类型的数据；输出，可以是数据，文档，图片等等。","code":""},{"path":"base_r基础.html","id":"函数的分类","chapter":"第 1 章 Base_R基础","heading":"1.5.3 函数的分类","text":"R 语言的函数包括内置函数，外来函数（R 包），自编函数三大类。实用的内置函数实用的外来函数（tidyverse）演示（使用R自带数据）自编函数","code":"\n# 查看R语言自带数据集\ndata()\n# 描述性统计类\nsum()\ncumsum()\nmean()\nmedian()\nsd()\nquantile()\n# 生成随机数\nrunif(n = , min = , max = ) # uniform，生成 n 个服从均匀分布的小数\nround(runif(n=,min=,max=),# round() 函数空值小数点的位数\n      digits = 0)# 生成 n 个服从均匀分布的整数\n# 根据变量取值进行筛选\nfilter()\n# 选择变量\nselect()\n# 生成变量\nmutate()\n# 排序\narrange()\n# 分组统计\ngroup_by() |>\n  summarize()\n# 加载数据\ndata(\"ToothGrowth\")\n# 查看表头\ncolnames(ToothGrowth)## [1] \"len\"  \"supp\" \"dose\"\n# 查看数据结构\nstr(ToothGrowth)## 'data.frame':    60 obs. of  3 variables:\n##  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...\n##  $ supp: Factor w/ 2 levels \"OJ\",\"VC\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...\n# 查看分组变量的取值\nunique(ToothGrowth$supp)## [1] VC OJ\n## Levels: OJ VC\n# 生成变量（生成两个标签）\nToothGrowth <- ToothGrowth |>\n  mutate(剂量=ifelse(dose==0.5,\"0.5mg\",\n                   ifelse(dose==1.0,\"1.0mg\",\"2.0mg\"))) |>\n  mutate(补充喂养=ifelse(supp==\"VC\",\" 维 C\",\" 橙汁\"))\n\n# 分组统计\nsummary_data <- ToothGrowth |>\n  group_by(补充喂养, 剂量) |>\n  summarize(\n    n=n(),\n    mean=mean(len),\n    sd=sd(len))"},{"path":"base_r基础.html","id":"查看函数帮助","chapter":"第 1 章 Base_R基础","heading":"1.5.4 查看函数帮助","text":"","code":"\n# 如果知道具体的函数名字：\n? # 查看函数的帮助，比如 ?filter\nhelp() # 同？\n?? # 查看 R 包的帮助，比如??dplyr\n# 如果不知道具体的函数名字\napropos(\"norm\")# apropos: 就... 而言"},{"path":"base_r基础.html","id":"向量及其操作","chapter":"第 1 章 Base_R基础","heading":"1.6 向量及其操作","text":"向量为一系列标量的集合","code":""},{"path":"base_r基础.html","id":"创建向量","chapter":"第 1 章 Base_R基础","heading":"1.6.1 创建向量","text":"","code":"\nc()\nseq()\nrep()"},{"path":"base_r基础.html","id":"向量的类型","chapter":"第 1 章 Base_R基础","heading":"1.6.2 向量的类型","text":"字符串，数值， logical 类型因子类型R 语言有一类非常重要的变量类型，名为因子（factor）。因子可以视为分类变量的特殊类型，它既有值，又对值进行了排序（levels）。","code":"\n# 字符串型：\na <- c(\"A\",\"A\",\"B\",\"B\",\"C\",\"C\")\n# 数值类型\nb <- c(1:10)\n# logical 类型\nc <- c(T,T,F,F)\n# 如何生成因子\nname1 <- c(0,1,2)\nname2 <- factor(name1,\n                levels = c(0,1,2), #levels 必须与原始数据取值相同\n                labels = c(\"Male\",\"Female\",\"Both\")) #labels 是为了\nclass(name1)## [1] \"numeric\"\nclass(name2)## [1] \"factor\""},{"path":"base_r基础.html","id":"向量的运算","chapter":"第 1 章 Base_R基础","heading":"1.6.3 向量的运算","text":"","code":"\n# 简单统计\na <- c(1:20)\nmean(a)## [1] 10.5\n# 算数运算\nb <- 2*a # 标量与向量\nc <- b+a # 标量与向量"},{"path":"base_r基础.html","id":"重要向量的循环补齐机制","chapter":"第 1 章 Base_R基础","heading":"1.6.4 重要：向量的循环补齐机制","text":"循环补齐","code":"\na <- c(\"A\",\"B\",\"C\",\"D\",\"E\")\nb <- c(1:3)\nc <- paste(a,b,sep = \":\")\nc## [1] \"A:1\" \"B:2\" \"C:3\" \"D:1\" \"E:2\""},{"path":"base_r基础.html","id":"交并补","chapter":"第 1 章 Base_R基础","heading":"1.6.5 交、并、补","text":"","code":"\n# 向量的交、并、补集，找不同，找相同，找不同（背熟）\n\n# 取交集\na <- c(1:15)\nb <- c(10:20)\nintersect(a,b) ## [1] 10 11 12 13 14 15\n# 取并集\nunion(a,b)##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n## [18] 18 19 20\n# 找不同\nsetdiff(a,b)## [1] 1 2 3 4 5 6 7 8 9\nsetdiff(b,a)## [1] 16 17 18 19 20\n# 去除重复\naa <- c(rep(\"A\",3),4:6)\nunique(aa)## [1] \"A\" \"4\" \"5\" \"6\""},{"path":"base_r基础.html","id":"向量的下标索引","chapter":"第 1 章 Base_R基础","heading":"1.6.6 向量的下标索引 []","text":"","code":"\n# 已经知道向量 x\nx <- c(\" 张三\",\" 小明\",\" 王五\",\" 李思齐\")\n# 如何选择李思齐？\nx[4]## [1] \" 李思齐\"\n# 如何同时选择小明与李思齐？\nx[c(2,4)]## [1] \" 小明\"   \" 李思齐\"\n# 如何不选择张三\nx[-1]## [1] \" 小明\"   \" 王五\"   \" 李思齐\""},{"path":"base_r基础.html","id":"数据框及其操作","chapter":"第 1 章 Base_R基础","heading":"1.7 数据框及其操作","text":"数据框是 R 语言最常用的二维表。","code":""},{"path":"base_r基础.html","id":"生成数据框","chapter":"第 1 章 Base_R基础","heading":"1.7.1 生成数据框","text":"","code":"\n# 通过 read.csv 函数等读取\ndf <- read_csv()\n# 通过向量组合生成\nage <- c(20,30,18,26)\nname <- c(\" 赵\",\" 钱\",\" 孙\",\" 李\")\nscore <- c(99,65,77,88)\ndf <- data.frame(age=age,\n                 name=name,\n                 score=score)"},{"path":"base_r基础.html","id":"数据框的下标索引","chapter":"第 1 章 Base_R基础","heading":"1.7.2 数据框的下标索引 \\[ , \\]","text":"","code":"\n# 数据框下标索引中间有逗号，逗号前表示行，逗号后表示列 [row,col]\n# 选择 df 前两列\ndf[,2] # 空着表示全选## [1] \" 赵\" \" 钱\" \" 孙\" \" 李\"\ndf[2,] # 选择 df 前两行##   age name score\n## 2  30   钱    65\ndf[2,2] # 选择 df 第二行第二列## [1] \" 钱\"\ndf[-3,] # 不选择第三行##   age name score\n## 1  20   赵    99\n## 2  30   钱    65\n## 4  26   李    88\ndf[c(1,3),2] # 选择 1， 3 行； 2 列## [1] \" 赵\" \" 孙\"\ndf[df$name==\" 李\",] # 选择姓李的数据##   age name score\n## 4  26   李    88"},{"path":"base_r基础.html","id":"数据框如何生成新的列","chapter":"第 1 章 Base_R基础","heading":"1.7.3 数据框如何生成新的列","text":"","code":"\n# 比如生成身高数据\nheight <- c(178,180,169,175)\ndf$height <- height\ndf##   age name score height\n## 1  20   赵    99    178\n## 2  30   钱    65    180\n## 3  18   孙    77    169\n## 4  26   李    88    175"},{"path":"base_r基础.html","id":"作业-1","chapter":"第 1 章 Base_R基础","heading":"1.8 作业","text":"查看函数帮助，说出 paste() 与 paste0() 的差别， sep 和 collapse 参数的作用。sep 和 collapse 参数的作用:加载 R 内置数据 ToothGrowth, 按照喂养方式与剂量分组统计不同组牙齿生长长度的均值，标准差，中位数，四分位间距，最小值，最大值，以及老鼠的个数。生成 1 到 100 范围差值为 5 的等差序列 ，生成 1 到一百万倍数为 10 的等比序列 b。已知向量 =c(1:18),b=c(5:36), 用两种方法找到只存在 ,b 某一个向量中的所有元素。将 data.csv 的年龄，年份都设置为因子。在 data.csv 中选择年龄标准化患病率数据，然后生成一列变量 se(标准误）。提示：根据正态性假设，标准误与区间存在以下关系： se=（区间上限-区间下限） /（2*1.96）。在 data.csv 中生成年龄组变量（5 年间隔），如果年份在 1990 年到 1994年之间，生成 year2 为”year:1990-94”；如果年份在 1995 年到 1999 年之间，生成”year:1995-99”, 以此类推。提示：使用 ifelse(test,yes,) 函数。","code":"\n?paste\n?paste0\n# paste 比 paste0() 多了一个参数： sep\n# 函数形式 paste (..., sep = \" \", collapse =NULL)\n# 示例\na <- c(1:4)\nb <- c(\"A\",\"B\",\"C\",\"D\")\n# sep 参数指定某个连接符，比如这里制定了下划线\npaste(a,b,sep = \"_\",collapse = NULL)## [1] \"1_A\" \"2_B\" \"3_C\" \"4_D\"\n# collapse 参数默认为 NULL，\n# 如果是其他值，向量就会坍缩成一个字符串标量\npaste(a,b,sep = \"_\",collapse = \":\")## [1] \"1_A:2_B:3_C:4_D\"\ndata(\"ToothGrowth\")\nstr(ToothGrowth)## 'data.frame':    60 obs. of  3 variables:\n##  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...\n##  $ supp: Factor w/ 2 levels \"OJ\",\"VC\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...\nlibrary(tidyverse)\n\n# 分组统计\ntemp <- ToothGrowth |> \n  group_by(supp, dose) |> \n  summarise(len_mean = mean(len),\n            len_sd = round(sd(len), 1),\n            len_median = median(len),\n            len_IQR_lower = quantile(len, 0.25),\n            len_IQR_upper = quantile(len, 0.75),\n            len_min = min(len),\n            len_max = max(len),\n            mice_number = n())\nknitr::kable(temp) # 展示数据\n# 等差序列\na <- seq(from = 1, to = 100, by = 5)\na##  [1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81\n## [18] 86 91 96\n# 等比序列\nb <- 10^seq(from = 0, to = 6)\nb## [1] 1e+00 1e+01 1e+02 1e+03 1e+04 1e+05 1e+06\n## 方法一 \n# duplicated() 函数判断一个向量每个元素是否重复，并生成一个逻辑向量\na <- c(1:18)\nb <- c(5:36)\nc <- c(a,b)#5:18 存在重复的元素\nc <- c[!duplicated(c)]\nc##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n## [35] 35 36\n## 方法二：使用 unique() 函数\n# unique() 函数可以直接去重\na=c(1:18)\nb=c(5:36)\nc <- c(a,b)#5:18 存在重复的元素\nc <- unique(c)\nc##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n## [35] 35 36\n## 方法三：使用 setdiff() 函数：\n# setdiff() 函数可以找到 a 或 b 互为补充的部分\na=c(1:18)\nb=c(5:36)\n# 1.\nc <- setdiff(a,b)\nc <- c(c,b)\nc##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n## [35] 35 36\n# 2.\nc <- setdiff(b,a)\nc <- c(a,c)\nc##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n## [35] 35 36\ntemp <- read_csv(\"data/data.csv\")\n# R 默认按照数值或字母先后顺序排序，因此这里不需要设定 levels\n# 但是其他离散的分类变量，一定要检查顺序对不对，设定好 levels\ntemp$year <- factor(temp$year)\ntemp$age <- factor(temp$age)\ntemp |> \n  filter(age == 'Age-standardized') |> \n  mutate(se = (upper- lower)/(1.96*2))## # A tibble: 360 × 11\n##   measure    location sex    age     cause metric year \n##   <chr>      <chr>    <chr>  <fct>   <chr> <chr>  <fct>\n## 1 Prevalence Global   Male   Age-st… HIV/… Perce… 1990 \n## 2 Prevalence Global   Female Age-st… HIV/… Perce… 1990 \n## 3 Prevalence Global   Both   Age-st… HIV/… Perce… 1990 \n## 4 Prevalence Global   Male   Age-st… HIV/… Rate   1990 \n## 5 Prevalence Global   Female Age-st… HIV/… Rate   1990 \n## 6 Prevalence Global   Both   Age-st… HIV/… Rate   1990 \n## # … with 354 more rows, and 4 more variables:\n## #   val <dbl>, upper <dbl>, lower <dbl>, se <dbl>\n## 方法一，用 ifelse：\ntemp |> \n  mutate(year2 = ifelse(year %in% c(1990:1994),\"year:1990_94\",\n                        ifelse(year%in%c(1995:1999),\"year:1995_99\",\n                        ifelse(year%in%c(2000:2004),\"year:2000_04\",\n                        ifelse(year%in%c(2005:2009),\"year:2005_09\",\n                        ifelse(year%in%c(2010:2014),\"year:2010_14\",\n                                     \"year:2015_19\"))))))## # A tibble: 900 × 11\n##   measure    location sex    age     cause metric year \n##   <chr>      <chr>    <chr>  <fct>   <chr> <chr>  <fct>\n## 1 Prevalence Global   Male   All ag… HIV/… Number 1990 \n## 2 Prevalence Global   Female All ag… HIV/… Number 1990 \n## 3 Prevalence Global   Both   All ag… HIV/… Number 1990 \n## 4 Prevalence Global   Male   All ag… HIV/… Perce… 1990 \n## 5 Prevalence Global   Female All ag… HIV/… Perce… 1990 \n## 6 Prevalence Global   Both   All ag… HIV/… Perce… 1990 \n## # … with 894 more rows, and 4 more variables:\n## #   val <dbl>, upper <dbl>, lower <dbl>, year2 <chr>\n## 方法二，用 case_when:\ntemp <- temp |>\nmutate(year2=case_when(year%in%c(1990:1994)~\"year:1990_94\",\n                       year%in%c(1995:1999)~\"year:1995_99\",\n                       year%in%c(2000:2004)~\"year:2000_04\",\n                       year%in%c(2005:2009)~\"year:2005_09\",\n                       year%in%c(2010:2014)~\"year:2010_14\",\n                       year%in%c(2015:2019)~\"year:2015_19\"))\n####### 正常计算OR #############\n#       患病  不患病\n#暴露     80     30\n#非暴露   20     70\n#       患病  不患病\n#暴露     0.8     0.3\n#非暴露   0.2     0.7\n# 患病暴露比（odds） 0.8/0.2\n# 不患病暴露比（odds） 0.3/0.7\n# 计算OR值 (0.8/0.2)/(0.3/0.7)=9.33\n#### 转换成logisttic计算 #######\n#  y患病=1，不患病=0\n#  x暴露=1，不暴露=0\n## 由于是二分类变量 1-p(y=1)=p(y=0)\n#       患病      不患病\n#暴露     p(y=1)  p(y=0)\n#非暴露  p'(y=1)  p'(y=0)\n## (1)OR = [p(y=1)/p'(y=1)]/[(p(y=0)/p'(y=0))]=[p(y=1)/p(y=0)]/[p'(y=1)/p'(y=0)]\n##    构建logistic方程 ln [P(y=1)/(1-P(y=1))] = bx+d  \n##    推出P(y=1)/(1-P(y=1))=P(y=1)/P(y=0)=exp(b*x+d)\n## (2)暴露组 p(y=1)/p(y=0) = exp(b*1+d)\n## (3)非暴露组 p'(y=1)/p'(y=0) = exp(b*0+d)=exp(d)\n## 根据(1)推导代入(2)(3)得到\n## OR=exp(b*1+d)/exp(d)=exp(b)\n########### R语言模拟程序  ###########\nx <- c(rep(1,80),rep(0,20),rep(1,30),rep(0,70))\ny <- rep(c(1,0),c(100,100))\ndf <- data.frame(x,y)\ndf$y <- factor(df$y,c(0,1))\ndf$x <- factor(df$x,c(0,1))\ndf2 <- df \nnames(df2) <- c(\"暴露\",\"患病\")\ntable(df2)##     患病\n## 暴露  0  1\n##    0 70 20\n##    1 30 80\n(0.8/0.2)/(0.3/0.7)## [1] 9.333\ntable(df$x,df$y)##    \n##      0  1\n##   0 70 20\n##   1 30 80\nglm(y~x,data = df,family = binomial())## \n## Call:  glm(formula = y ~ x, family = binomial(), data = df)\n## \n## Coefficients:\n## (Intercept)           x1  \n##       -1.25         2.23  \n## \n## Degrees of Freedom: 199 Total (i.e. Null);  198 Residual\n## Null Deviance:       277 \n## Residual Deviance: 224   AIC: 228\nlog(9.333)## [1] 2.234"}]
